@model Cleverest.Mvc.ViewModels.Admin.GameViewModel

@{
    ViewBag.Title = "Create";
}

<div id="createGamePage">
    @Shared.PageHeader("Create", "You are creating a game")

    @using (Html.BeginForm("Create", "Game", FormMethod.Post, htmlAttributes: new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div class="row">
            <div class="span12">
                @using (Html.BeginForm("Create", "Game", FormMethod.Post, htmlAttributes: new { @class = "form-horizontal", enctype = "multipart/form-data" }))
                {
                    @RenderField(x => x.Title)
                    @RenderField(x => x.Location)

                    <div class="form-row">
                        @Html.LabelFor(x => x.GameDate)
                        @Html.TextBoxFor(x => x.GameDate, htmlAttributes: new { @class = "datepicker" })
                        @Html.ValidationMessageFor(x => x.GameDate)
                    </div>
                    <div class="form-row">
                        @Html.LabelFor(x => x.Image)
                        <input type="file" name="Image" id="Image" />
                        @Html.ValidationMessageFor(x => x.Image)
                    </div>

                    <input type="submit" value="Submit" />
                }
            </div>

        </div>
    }

    <div>
        @Html.ActionLink("Back", "List")
    </div>
</div>

@helper RenderField(System.Linq.Expressions.Expression<Func<Cleverest.Mvc.ViewModels.Admin.GameViewModel, string>> expression, bool required = false)
{
    <div class="form-row">
        @if (required)
        {
            @Html.LabelFor(expression, new { @class = "required-field" })
        }
        else
        {
            @Html.LabelFor(expression)
        }
        @Html.EditorFor(expression)
        @Html.ValidationMessageFor(expression)
    </div>
}

